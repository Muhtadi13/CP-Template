
//lazy propagation
//update adds new value
struct DataSet{
    lli sum;
    lli lazy;
};

const int N = 131072;//for 1e5
//const int N = 1048576 //for 1e6
DataSet segtree[N<<1];
DataSet combine(DataSet l, DataSet r){
    DataSet res;
    res.sum = (l.sum + r.sum);
    return res;
}
DataSet makeDataSet(lli val){
    DataSet res;
    res.sum = val;
    return res;
}
void pushDown(int node, int arrleft, int arrright){
    if (segtree[node].lazy == 0)//for direct change update here
        return;
    segtree[node].sum += (arrright - arrleft + 1) * segtree[node].lazy;//for direct change update here
    if (arrright != arrleft){
        segtree[node<<1].lazy += segtree[node].lazy;//for direct change update here
        segtree[node<<1|1].lazy += segtree[node].lazy;//for direct change update here
    }
    segtree[node].lazy=0;//for direct change update here -1
}
void build(vector<lli> &a, int node, int arrleft, int arrright){
    if (arrleft == arrright){
        segtree[node].sum=a[arrleft];
        segtree[node].lazy=0;//for direct change update here -1
    }
    else{
        int arrmid = (arrleft + arrright)>>1;
        build(a, node<<1, arrleft, arrmid);
        build(a, node<<1|1, arrmid + 1, arrright);
        segtree[node] = combine(segtree[node<<1], segtree[node<<1|1]);
        segtree[node].lazy = 0;//for direct change update here -1
    }
}
void rangeUpdate(int node, int arrleft, int arrright, int posleft,int posright, lli new_val){
    pushDown(node,arrleft,arrright);
    if ((arrleft > posright) || (arrright < posleft))
        return;
    if ((posleft<=arrleft) && (posright>=arrright)){
        segtree[node].lazy += new_val;//for direct change update here
        pushDown(node,arrleft,arrright);
    }
    else{
        int arrmid = (arrleft + arrright)>>1;
        rangeUpdate(node<<1, arrleft, arrmid, posleft,posright, new_val);
        rangeUpdate(node<<1|1, arrmid + 1, arrright, posleft,posright, new_val);
        segtree[node] = combine(segtree[node<<1], segtree[node<<1|1]);
        segtree[node].lazy = 0 ;
    }
}
DataSet query(int node, int arrleft, int arrright, int L, int R){
    pushDown(node,arrleft,arrright);
    // node has a connection to arrleft or arrright not with quL or quR
    if ((L > R) || (arrleft > arrright))
        return makeDataSet(0);
    if ((L <= arrleft) && (R >= arrright))
        return segtree[node];
    if ((L > arrright) || (R < arrleft))
        return makeDataSet(0);
    int arrmid = (arrleft + arrright)>>1;
    return combine(query(node<<1, arrleft, arrmid, L, R),
                   query(node<<1|1, arrmid + 1, arrright, L, R));
}

void debug(int u, int st, int en) {
    cout<<"--->"<<u<<" "<<st<<" "<<en<<" "<<segtree[u].sum<<" "<<segtree[u].lazy<<"\n";
    if (st==en) return;
    int mid = (st+en)/2;
    debug(u<<1, st, mid);
    debug(u<<1|1, mid+1, en);
}

