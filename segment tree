//segment tree updates precisely doesn,t add

struct DataSet{
    lli sum;
};

struct SegmentTree
{
    int N;
    vector<DataSet> segtree;
    SegmentTree(int n){
        N=n;
        segtree.resize(4*N);
    }

    DataSet combine(DataSet l, DataSet r){
        DataSet res;
        res.sum = l.sum + r.sum;
        return res;
    }

    DataSet make_dataSet(lli val){
        DataSet res;
        res.sum = val;
        return res;
    }

    void build(vector<lli> &a, int root, int arrleft, int arrright){
        if (arrleft == arrright){
            segtree[root] = make_dataSet(a[arrleft]);
        }
        else{
            int arrmid = (arrleft + arrright) / 2;
            build(a, root * 2, arrleft, arrmid);
            build(a, root * 2 + 1, arrmid + 1, arrright);
            segtree[root] = combine(segtree[root * 2], segtree[root * 2 + 1]);
        }
    }

    void point_update(int root, int arrleft, int arrright, int pos, lli new_val)
    {
        if ((arrleft > pos) || (arrright < pos))
            return;
        if (arrleft == arrright){
            segtree[root] = make_dataSet(new_val);
        }
        else{
            int arrmid = (arrleft + arrright) / 2;
            point_update(root * 2, arrleft, arrmid, pos, new_val);
            point_update(root * 2 + 1, arrmid + 1, arrright, pos, new_val);
            segtree[root] = combine(segtree[root * 2], segtree[root * 2 + 1]);
        }
    }

    DataSet query(int root, int arrleft, int arrright, int L, int R){

        // root has a connection to arrleft or arrright not with quL or quR
        if ((L > R) || (arrleft > arrright))
            return make_dataSet(0);
        if ((L <= arrleft) && (R >= arrright))
            return segtree[root];
        if ((L > arrright) || (R < arrleft))
            return make_dataSet(0);

        int arrmid = (arrleft + arrright) / 2;
        return combine(query(root * 2, arrleft, arrmid, L, R),
                    query(root * 2 + 1, arrmid + 1, arrright, L, R));
    }
    
};
